try
  source ~/.dotfiles/private/vim_pre
catch
  " No private pre-load dotfiles present.
endtry

set term=screen-256color
set nocompatible
filetype plugin on
syntax on
set notermguicolors

" Must be set before ALE is loaded.
let g:ale_completion_enabled = 1


" Plugins
call plug#begin('~/.vim/plugged')


" Sensible defaults
Plug 'tpope/vim-sensible'

" Tab completion for /
Plug 'vim-scripts/SearchComplete'

" Multi-cursor
Plug 'mg979/vim-visual-multi', {'branch': 'master'}

" Comment multiple lines is \c
Plug 'preservim/nerdcommenter'

" Highlight trailing whitespace
Plug 'ntpeters/vim-better-whitespace'

" More syntax guides
Plug 'justinmk/vim-syntax-extra'

" Airline, I couldn't stay away.
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Better file swaps
Plug 'christoomey/vim-tmux-navigator'

" More syntax highlighting.
Plug 'sheerun/vim-polyglot'
Plug 'flazz/vim-colorschemes'

" NNN File manager
Plug 'mcchrish/nnn.vim'

" Better c++ vim highlighting
Plug 'octol/vim-cpp-enhanced-highlight'

" Better spellcheck, including camel case
Plug 'kamykn/spelunker.vim'

" Make it easier to navigate hidden buffers.
 Plug 'jlanzarotta/bufexplorer'

" Linting and compiler warnings.
Plug 'dense-analysis/ale'

" Fuzzy file matcher.
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }

call plug#end()

" Call :PlugInstall, :PlugUpdate, or :PlugClean


" COLORS AND THEMES
"if exists('+termguicolors')
  "let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  "let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  "set termguicolors
"endif
colorscheme jellybeans
let g:airline_theme = 'jellybeans'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_tab_type = 0

" Number lines
:set number relativenumber
:set nu rnu

" Always use 2-space tab, especially in python
set softtabstop=2 tabstop=2 shiftwidth=2 expandtab
autocmd FileType python set softtabstop=2 tabstop=2 shiftwidth=2 expandtab

" Spellcheck
set spell spelllang=en_us
" Better spellcheck coloring
hi clear SpellBad
hi SpellBad term=undercurl cterm=undercurl ctermfg=9
set nospell

"human readable linebreak
set linebreak

"Used for tab completion
set wildmode=longest,list,full
set wildmenu

" Crosshairs
:set cursorcolumn
:set cursorline
:set colorcolumn=81  "Hilight the first 'BAD' column
highlight CursorLine   cterm=NONE ctermbg=235 ctermfg=NONE
                     \ guibg=black guifg=NONE
highlight CursorColumn cterm=NONE ctermbg=235 ctermfg=NONE
                     \ guibg=black guifg=NONE
highlight ColorColumn ctermbg=235 guibg=black

" Line wrap auto for text file formats
au BufRead,BufNewFile *.md  setlocal textwidth=80
au BufRead,BufNewFile *.tex setlocal textwidth=80

" Automatically word wrap overflowed line
nmap <leader>w vipgq

" Want to know when tab is typed
set list
set listchars=tab:>-

set completeopt-=preview

" Turn off gross default highlighting
:hi clear TODO
:hi clear FIXME
:hi clear XXX
:hi link TODO Comment
:hi link FIXME Comment
:hi link XXX Comment

" disable some features for increased latex performance
au FileType tex setlocal nocursorline
au FileType tex setlocal nocursorcolumn
au FileType tex :NoMatchParen
au FileType tex setlocal colorcolumn=

" Want to know when tab is typed
set list
set listchars=tab:>-

" Open window to a buffer in the right vertical pane
cabbrev vb vert belowright sb

" These options are only useful for when gvim launches vim in a gnome window.
set guioptions -=T  " Remove top bar
set guioptions -=m  " Remove menu

set guifont=Inconsolata-dz\ for\ Powerline\ Medium\ 12  " Font and size
set vb t_vb=  " turn off that annoying beep!

" Type to nav
let g:nnn#command = 'nnn -n'
" Disable default mappings
let g:nnn#set_default_mappings = 0
" Start n³ in the current file's directory
nnoremap <leader>n :NnnPicker %:p:h<CR>
let g:nnn#layout = 'tabnew' " or vnew, tabnew etc.
let g:nnn#action = {
      \ '<c-t>': 'tab split'}


" Rebind increment so it plays nice with tmux and 10-digit numbers.
:set nrformats+=alpha
" Use ctrl-[i]ncr and ctrl-[d]ecr
:nnoremap <C-i> <C-a>
:nnoremap <C-d> <C-x>

" Command aliases make it easier to not mess up
fun! SetupCommandAlias(from, to)
  exec 'cnoreabbrev <expr> '.a:from
          \ .' ((getcmdtype() is# ":" && getcmdline() is# "'.a:from.'")'
          \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfun
call SetupCommandAlias("W","w")
call SetupCommandAlias("Q","q")
call SetupCommandAlias("E","e")
call SetupCommandAlias("WQ","wq")
call SetupCommandAlias("Wq","wq")

" Allow hidden buffers to have changes.
set hidden

" A quick macro to switch between the header/body/test of a cc library.
:command CCHeader :e %:r.h
:command CCBody :e %:r.cc
:command CCTest :e %:r_test.cc

" ALE options.
let g:ale_lint_on_save = 1
let g:ale_detail_to_floating_preview = 1
let g:ale_set_balloons = 1
let g:ale_floating_preview = 1
let g:ale_hover_to_floating_preview = 1
let g:ale_virtualtext_cursor = 'disabled'

nnoremap <silent> <Leader>ar <Cmd>ALEFindReferences<CR>
nnoremap <silent> <Leader>aR <Cmd>ALERename<CR>
nnoremap <silent> <Leader>aF <Cmd>ALEFileRename<CR>
nnoremap <silent> <Leader>ad <Cmd>ALEGoToDefinition<CR>
nnoremap <silent> <Leader>aD <Cmd>ALEGoToImplementation<CR>
nnoremap <silent> <Leader>ai <Cmd>ALEImport<CR>
nnoremap <silent> <Leader>af <Cmd>ALEFix<CR>
nnoremap <silent> <Leader>ah <Cmd>ALEHover<CR>
nnoremap <silent> <Leader>ae <Cmd>ALEDetail<CR>
nnoremap <silent> <Leader>an <Cmd>ALENextWrap<CR>

nmap <silent> <C-PageUp> <Cmd>ALEPrevWrap<CR>
nmap <silent> <C-PageDown> <Cmd>ALENextWrap<CR>

" Use <TAB> to cycle thru autocomplete suggestions.
inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" : "\<TAB>"

" Better error / warning signs:
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'
highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarningSign ctermbg=NONE ctermfg=yellow
" Don't leave annoying grey column on left.
highlight clear SignColumn


" FZF Fuzzy Finder.
nnoremap <silent> <Leader>f <Cmd>FZF<CR>

try
  source ~/.dotfiles/private/vim_post
catch
  " No private pre-load dotfiles present.
endtry

" Enable project specific vimrc files.
set exrc
set secure
